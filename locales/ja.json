{
  "index": {
    "role": "UI / UX Engineer",
    "name": "フジイ タカヒロ",
    "activity": "ポートフォリオ以外の制作物や取り組んでいる活動"
  },
  "header": {
    "about": "Me 🙋‍♂️",
    "works": "Works 👨‍💻",
    "blog": "Blog 📄",
    "articles": "ブログ"
  },
  "name": "フジイ タカヒロ",
  "about": {
    "techstack": "Teck Stack",
    "biography": "Biography",
    "awards": "賞歴",
    "description-name": "Takahiro Fujii(藤井 貴浩)",
    "description-title": "UI / UX エンジニア 兼 VPoE",
    "description-overview": "WealthPark株式会社にて、VPoEとしてDigital Altanative Asset Platformの実現のため、サービス/組織開発に携わる。前職ではオンライン旅行予約システム(楽天トラベル)の開発に従事。エンジニアリングマネージャとして、サービス/組織開発に携わっていた。",
    "description-main": "大学卒業後、楽天に入社。楽天トラベルの開発に携わる。国際業務チームにて、海外ホテルの予約システムや管理画面、経理システム、インバウンドサイト、外部システム連携等の開発、立ち上げに参画。フルスタックエンジニアとして従事していたが、2017年以降UI/UXを専門領域としたエンジニア・エンジニアリングマネージャとなる。以降、楽天トラベルのWebフロントエンド、Android/iOSグループのエンジニアリングマネージャとして、サービス/組織開発に携わっていた。2020年よりWealthParkに参画。WeatlhParkにおいて、VPoEとして国際色豊かなエンジニア組織の強化、成長 / 不動産管理システムを中心とした各サービスの開発に従事している。FrontEnd Engineerとしてサービス開発も行う。フリーランス・プライベートではプロダクトデザイン含めた企画・デザイン・開発を行う。趣味はバスケと偶にする海外旅行。 好きなものはコーヒー、お酒、和食。"
  },
  "blogs": {
    "title": "記事一覧",
    "10mins": "10分",
    "8mins": "8分",
    "titles": {
      "job-change": "退職エントリー",
      "vision-driven": "直感と論理をつなぐ思考法 VISION DRIVEN を読んで考えていること",
      "one-month": "転職して一ヶ月働いてみて(Rakuten -> WealthPark)",
      "tutorial-document": "インターン向けの事前オンボード、チュートリアル資料を作成するにあたって意識する5つのこと",
      "vpoe": "VPoEとしての最初の取組",
      "koikifm": "エンジニアリングマネージャ向けのポッドキャスト、koiki.fm始めました。",
      "wealth-park": "WealthParkのエンジニア組織、技術スタック紹介"
    }
  },
  "presentations": {
    "title": "主な発表と講演",
    "name": {
      "react-tokyo-plus": "react tokyo plus",
      "travel-frontend-react": "react meetup",
      "microservice-meetup": "Microservice Meetup Vol.6",
      "tus-class": "東京理科大学 - 公演",
      "tus-article": "東京理科大学 - 寄稿(科学フォーラム)",
      "travel-spring": "Spring Day 2016",
      "jsug-spring-rest-docs": "JSUG(Japan Spring User Group)"
    },
    "titles": {
      "react-tokyo-plus": "Large react product with 20+ FrontEnd Engineers in Rakuten Travel",
      "travel-frontend-react": "楽天トラベルのフロントエンドについて",
      "microservice-meetup": "FrontEndからみるmicroserviceとBackendからみるmicroservice",
      "tus-class": "グローバルな環境におけるエンジニアのキャリア形成",
      "tus-article": "好きなことを仕事にする",
      "travel-spring": "楽天トラベルとSpring(SlideShare)",
      "jsug-spring-rest-docs": "Spring Rest Docs(SpringOneを経験してよりよいWebサービスを作るために僕らが取り組むこと)(SlideShare)"
    }
  },
  "design": {
    "title": "Design Works(一部)",
    "name": {
      "koikifm": "小粋.fm",
      "nabnab": "Lineスタンプ",
      "tokyoflower": "Logo",
      "webhack": "Speaker Card",
      "winx": "Basketball Uniform",
      "business-card": "名刺",
      "superpoints": "Basketball Uniform"
    },
    "titles": {
      "koikifm": "小粋.fm ロゴデザイン",
      "nabnab": "Line Sticker for Web Engineer",
      "tokyoflower": "東京笑花 ロゴデザイン",
      "webhack": "Speaker Card Design",
      "winx": "バスケットボールユニフォームデザイン",
      "business-card": "名刺デザイン",
      "superpoints": "バスケットボールユニフォームデザイン"
    }
  },
  "react-tokyo-plus": {
    "1": " という、react関連のmeetupでの登壇、発表になります。",
    "2": "株式会社メルカリにて、3名にて発表を行いました。タイトルにある通り、20人超のエンジニアでの、大規模なプロダクトの実装や課題、取り組みなどについて話をしました。資料と同様に、英語での発表となります。",
    "3": "3部構成となっていて、",
    "chapter1": "1部 - プロジェクトが始まる前の基盤、フレームワーク周りの話",
    "chapter2": "2部 - プロジェクト通じての振り返りや課題",
    "chapter3": "3部 - 振り返りを経ての現在の取り組み",
    "4": "私は2部を担当しました。",
    "5": "2018,19年現在、日本の会社の中では、20名以上の規模でreactを利用したアプリを実装している組織は少ないので、こういった観点での話をするのも面白いのではないかと思い、話をさせて頂きました。主にはUIコンポーネントライブラリを実装したことによるメリットと課題の振り返りや、アプリの開発の状況やフェーズに応じて、どのように組織を変えていったかを話しました。特にUIコンポーネント開発については苦しんだ部分も多く、比較的内容が厚めです。",
    "6": "一部重複している内容もあり、かつ日本語ですが、こちらのLTでお話しした内容についても合わせて確認していただくと、より当時我々がどのようなことを行なっていたのか、全体像を把握することができると思います。"
  },
  "travel-frontend-react": {
    "title": "楽天トラベルのフロントエンドについて",
    "1": " という、react関連のmeetupでのLT発表になります。",
    "2": "株式会社Sansanにて、発表を行いました。今回は\"楽天トラベルのフロントエンドについて\"、というざっくりとしたタイトルですが、2019年現在における楽天トラベルのフロントエンドの近況について話をしました。",
    "3": "スライドにもある通り、2017年から舵を切って変更してきた楽天トラベルのフロントエンドの近況について話をしました。microservice meetupで話をして以来、外部向けに楽天トラベルのreactのプロダクト、行なっている取り組みを初めて対外的に発表、共有しました。短い発表時間であった為、全てをスライドに含めることは出来ませんでしたが、メインで作成しているプロダクト、ライブラリ、フレームワークの概要を把握できる内容となっています。"
  },
  "microservice-meetup": {
    "title": "FrontEndからみるmicroserviceとBackendからみるmicroservice",
    "1": "というmicroservice関連のトピックについて扱うmeetupにて発表をしました。.",
    "2": "今回の発表は、meetupを主催(当時)していたFinc.incで行いました。この発表では、楽天トラベルがどのようにモノリスなアーキテクチャからマイクロサービスに形を変えて行ったのか。変わっていく過程、変わった結果発生した問題に対して、どのような取り組みを行っているかについて話をしました。",
    "3": "この発表では主に3つのフェーズに分けて話を進めています。",
    "phase1": "フェーズ 1 - モノリスな多数のアプリを新規開発していた時代",
    "phase2": "フェーズ 2 - ドメインの再抽出、リソースの再定義などを経て、独立したapiが作られ、分割され、共通化され、microservice architectureに近づいていった時代",
    "phase3": "フェーズ 3 - フェーズ 2で発生した問題への対処。加えて、SPAで再設計するにあたり、フロントエンドの視点からmicroserviceをどのように捉えているか。",
    "4": "この発表は、楽天トラベルが経てきた自然なarchitectureの変化とmicroserviceを関連づけて話をしました。"
  },
  "wealth-park": {
    "pro": {
      "title": "はじめに",
      "1": "今回は、WealthParkのVPoEとして、WealthParkの開発組織について、紹介します。今後、弊社のブログなどを始めた際は、そちらに記事を移管する可能性があります。",
      "2": "WealthParkは、そこまで歴史が浅いサービスではありませんが、今まで外部に向けて、特にエンジニアリングに関連する情報の発信はあまりしてきませんでした。(Googleなどで検索しても、全く情報が出てこないと思います😅)",
      "3": "そんな中、エンジニアの方々や、WealthParkに興味を持たれている方々に対し、WealthParkのエンジニアがどのような組織で、どのようなことを考え、日々プロダクトの開発・改善を行っているのか発信したいと考えています。",
      "4": "WealthParkの エンジニア / プロダクト / デザイン組織は、国際色豊かな組織です。エンジニア組織は、非常に国際色かで、10ヵ国以上の国から、約20名ほどの人数で構成されています。その為、通常の業務はほぼ英語で行われています。(正直、僕が一番英語苦手なんじゃないかと思います笑)",
      "5": "そういった環境もあり、別途英語版のブログも展開する予定です(今回は僕の個人ブログで日英併記ですが)。弊社のエンジニア組織は、日本人は僕を含めて2人しかおらず、他は全員海外出身のエンジニアです。その為、今後、このような記事は段々と英語のものが増えていくんだろうなと思っています。ただ、先にあるように、エンジニアに向けた発信だけではなく、WealthParkに興味を持ってくださっている方々などに対して発信したいという動機もあり、日本語としても記事を書かせて頂いています。"
    },
    "business": {
      "title": "事業内容",
      "1": "WealthParkは、個人投資家・不動産管理会社に資産運用・管理プラットフォームアプリケーションを提供するスタートアップITベンチャーです。現在はまず、オルタナティブアセットのなかのひとつである不動産業界で非流動資産の「見える化」に挑戦しています。",
      "2": "エンジニアポジションも採用中です。",
      "cooperate": {
        "name": "コーポレートサイト"
      },
      "recruit": {
        "name": "採用ページ"
      }
    },
    "diversity": {
      "title": "多様性 / 国際色豊かな組織",
      "1": "WealthParkのエンジニア組織は、非常に国際色豊かです。(プロダクト組織もです。)様々なバックグラウンドを持った人々が集まっています。この点は、僕の前職の楽天とも似ている点です。",
      "2": "ただ、WealthParkのエンジニア組織はもともと日本人0の状態で始まり、比較的長い間その状態を維持してきました。ですので、多様性があり、国際色豊かな組織であるということがより自然に、また当たり前のこととして、会社内に浸透しています。",
      "3": "先ほども共有しましたが、日々のコミュニケーションは英語で行われています。",
      "4": "弊社の多様性に関しては、弊社モバイルチームのHead of Mobile(ChapterLead)のShoumeiが下記の記事で面白いエピソードと共に語っています。",
      "shoumei": "【WealthPark 社員インタビュー vol. 1】バイリンガルエンジニアが魅力に思う、WealthParkの多様性",
      "5": "WealthParkのエンジニア組織は、非常にコミュニケーションを大切にしています。自分の非常に好きな習慣としては、大体午後3時頃になると、\"コーヒー行く?\"にというメッセージがSlackのエンジニアチャネルに流れます。みんなで近くのファミリーマートまで散歩し、コーヒーを買って話しながら帰ります。全員が絶対行くというわけでもなく、行きたい人、行ける人はという感じです。",
      "6": "個人的には入社直後、この習慣によて、エンジニア全員と話をする機会が自然と出来て、オンボーディング的な観点でも非常に助かりました。(現在は基本的にリモートワークで業務にあたっている為、出来ていません。たまにコーヒーを飲みながらビデオチャットをしたりしています。) また気軽に会社にいける状況になって待ち遠しいことを挙げろと言われれば、僕はコーヒータイムを挙げます笑",
      "7": "また業務においてもコミュニケーションやディスカッションを大切にしています。皆で常にオープンに議論やフィードバックできるカルチャーがあり、大切にしていきたいと考えています。",
      "diversity": "でも、仲の良い和気あいあいとした雰囲気だけではなく、良いプロダクトを作ろう、ゴールを達成しようという真剣さもうまく共存していて、働いていてすごく楽しいチームなんです。メンバー全員が仕事において「面白さ」と「シリアスさ」の両立が出来ていて。これに関してはチームの多様性もポイントで、同じ価値観や考えを持つメンバーしかいないユニカルチャーのチームだと一方に偏りがちになってしまうところが、例えば今の様な構成のチームだと、おのずとバランスが良くなるなと感じています。"
    },
    "organization": {
      "title": "多様性 / 国際色豊かな組織",
      "1": "組織体系を紹介します。開発、プロダクト組織はいわゆるマトリクス型となっています。",
      "PDE": {
        "title": "Product / Design / Engineering",
        "1": "弊社では、COO, CPOである間瀬の直下に、プロダクト、デザイン、エンジニアリングの組織が展開されています。エンジニア組織は現在5つのチームに分かれています(FrontEnd, BackEnd, Mobile, QA, DevOps)。それぞれのチームにはChapter Lead(Head of X)と呼ばれるリードポジションのメンバー(詳細は後述)と、メンバーがいます。事業のメンバーとも密にコミュニケーション、議論をしながら、Product, Design, Engineeringの三つ巴で日々プロダクト開発、改善に取り組んでいます。"
      },
      "horizontal": {
        "title": "水平型",
        "1": "先ほどWealthParkの組織はマトリクス側と述べましたが、組織図上は水平なものになっています。つまりFrontEnd, BackEndなどの専門性に応じたチーム分けをしています。",
        "2": "少し矛盾しますが、一方で1個人として、FullStackな働き方も歓迎しています。メンバーによっては、チームを跨いで、プロダクト開発に貢献しているメンバーもいます。一方で専門性を突き詰めるメンバーもいます。本人のキャリア思考にも寄り添い、柔軟に考えています。例えば、QAのChapterLeadであるSwarnaは、ScrumMasterとして開発プロセスの改善にも取り組んでいます。",
        "3": "各チームには、Chapter Leadがいて、メンバーの日々の開発のサポートや、各技術レイヤー毎のガイドラインの検討や、目標設定などを行います。一方で、Chapter Leadは1エンジニアとして、何かのプロジェクトやSquad(後述)に所属しており、他のメンバーと同じように(時間の使い方は異なりますが)、開発作業も行っています。WealthParkでは、Chapter Leadに対する期待値を次のように定義しています。"
      },
      "vertical": {
        "title": "垂直型",
        "1": "一方で組織図には表されていませんが、日々の業務は、Squadというプロダクトベースのチームで一緒に働くことが多いです。Squadについては、本日はそこまで詳しくは触れません。別の記事でSquadについては説明しています。",
        "2": "例えば、管理会社様に向けて提供しているWealthPark Businessというプロダクトがあります。そのプロダクトで1つのSquadがあり、そこには義業側のメンバー、Product Manager, FrontEnd/BackEnd/Mobile/QA/DevOps Engineerが所属しています。いわゆる垂直型の組織です。そのプロダクトが掲げる目標を達成する為に、日々Squad毎に一丸となって業務に取り組みます。",
        "3": "但し、コードレビューや、課題の解決は、Chapter間で行ったりもします。",
        "summary": {
          "1": "WealthParkでは、水平型(Chapter)と垂直型(Squad)が共に存在する、マトリクス型の組織体系を採用しています。これにより、各人が専門性と高めつつも、他の部署の人とも一切の壁が無い状態を目指しています。"
        }
      }
    },
    "development": {
      "title": "WealthParkの開発手法",
      "discovery": {
        "1": "いわゆる、プロジェクト初期のDiscoveryフェーズでは、様々な取組を行っています。WealthParkでは、ビジネスと開発の距離が近いので、ビジネスの課題やIssueをエンジニアのmtgに同席してシェアして頂いたり、一緒にDesign SprintやPlanningに取り組んだりします。",
        "2": "プロジェクトキックオフ時は、プロダクトマネージャーを中心として、現状のIssueや、ビジネスとして期待したいことの共有や、それをどのように解決するか、プロジェクトをどのように進めていくか議論しています。",
        "3": "Design Sprintも、最近のリモート環境に合わせて、Miro上で行うことが増えました。Miro上でスケッチや、コメントを書き込んだりすると、後でグルーピングができたり、コメントを再確認できるのでおすすめです。Design Sprintはアイデアを出し合うことも重要ですが、このフローを取り入れることにより、より早いフェーズからエンジニアがプロダクト開発に携わることができるようになり、より1人1人のオーナーシップをEngageすることができていて、特にこの点が素晴らしいと感じています。一方で、元来のDesign Sprintが定義する5日間ほどの期間はとることがなかなか難しいということもあり、弊社にとってより良いスタイルを模索しています。"
      },
      "development": {
        "1": "WealthParkでは、基本的にAgileで開発を進めています。Squadや、Product、Projecによって、カスタマイズされている部分がありますが、大まかには、",
        "2": "Maintenance Work - Kanbanを利用した継続的なフロー",
        "3": "Squad - Scrumで2週間Sprintで開発",
        "4": "となります。実は、比較的スプリント開発を全社的に明確に始めたのは最近です。または、スプリント開発をしていても、プランニングやデモ、振り返りに時間を使えていないといった課題がありました。現在はそういった点を見直しながら、改めてSprintに挑戦しています。"
      }
    },
    "techstacks": {
      "title": "WealthParkの技術スタック",
      "list": {
        "1": "Code : github, gitlab",
        "2": "FrontEnd : JavaScript(React, TypeScript), PHP",
        "3": "BackEnd : golang, Node, Python, Ruby, PHP",
        "4": "Mobile: Swift, Java, React Native",
        "5": "CI/CD : Jenkins, GitLab CI",
        "6": "Infrastructure: AWS, GCP, k8s ",
        "7": "Other: AWS Lambda, Cloud Function, GraphQL, gRPC etc.."
      },
      "1": "弊社に入社してから自分も驚いたのですが、細かい所も含めると、非常に様々な技術が混在しています。WealthPark自体はそこまで歴史が浅いプロダクトではなく、最も古いものだと5年以上前に作られたプロダクトも存在しています。",
      "2": "Webに関しては、レガシーなプロダクトがPHPなMonolithなアプリとして存在していて、FrontEndに関しては新しいものに関しては基本的にReactで開発を行っています。BackEndに関しては、プロダクトに応じて現在は議論している段階です。比較的新しいものは、Goであったり、BFFとしてのNode(GraphQL)のものなどがあります。Mobileは、基本はSwiftとJavaでiOSとAndroidを開発していますが、一部ReactNativeも利用しています。",
      "3": "今後の方向性としては、FrontEndは、今後はReactに統一していきます。既存のプロダクトに関しても、置き換えていく予定です。BackEndは、今後の議論によっては、ある程度方向性をもたせていくことになります。ある程度Goに寄せていくことになると考えています。また、用途によって、FaaSを使うこともあります。現状、そもそもAPIとしても足りていない機能が多々あるので、API群の拡充も図っている最中です。Mobileは、継続して負債を返却しつつ、モダンな技術の採用を検討しています。",
      "4": "アーキテクチャ変更や、技術的負債に対する想いは採用ページの募集要項に少しですが書かせて頂いています。興味がある方は、こちらもご覧下さい。"
    },
    "wrap": {
      "title": "まとめ",
      "1": "はじめて、明確に会社の組織の紹介ということで、やや網羅的な文章となりました。より深掘りして聞きたい部分などありましたら、気軽にご質問ください。",
      "2": "また、もしも弊社のエンジニア組織に興味がある方がいらっしゃいましたら、カジュアル面談なども可能ですので、お声がけ頂けますと幸いです。",
      "3": "日々、いろんな点で改善を重ねています。次に組織や技術スタックを紹介する時は、めちゃくちゃよくなってるなーって思われるような記事があげられるように頑張ります！"
    }
  },
  "spotify-model": {
    "pro": {
      "1": "弊社ではいわゆるSpotify Modelをアレンジした開発手法・組織体系を導入しています。僕の過去の記事でも、部分的にこの点に対して言及していますが、明確にSpotify Modelに焦点をあてた記事を書いていなかった為、今回書いてみることにしました。",
      "2": "まず、この組織モデルに対して、賛否両論ある点は理解しています。また、Spotidy Modelの一部を取り入れ、実際に運用する中で、いい所も、課題感も感じることができました。この記事が、Spotify Modelに対するCase Studyと、組織改善、そして自律性と調和について考えるきっかけになれば幸いです。"
    },
    "spotify-model": {
      "1": "Spotify Modelとして知らているこの組織体系、開発手法は、2012年に発表された、\"Scaling Agile @ Spotify\"という文章が起源です。日本語での翻訳記事もあります。",
      "2": "Spotify Modelは、ラージスケールアジャイルを目指す一つの手法ですが、独自の用語も多く、それもあって、\"Spotify Model\"という独自のモデルとして言及されることが多いです。Spotify Modelは成長する組織において、自律と調律のバランスをどのように維持するか、という課題に対して、SquadやChapterといった組織構造を用いて、両者を追求し続けることを目指します。",
      "3": "以降の章で、より具体的な部分に触れていきます。"
    },
    "goal": {
      "1": "Spotifyではその開発、組織手法がもたらす最大のメリットとして、'Autonomy(自治)'を上げています。Squad + Chapterという組織構造で、より一人一人のOwnership、責任と自由を強化していくことが、この開発手法を取り入れる一つの大きな目的と捉えています。SquadとChapterについては、この後のセクションで説明していきます。"
    },
    "squad": {
      "1": "Spotify Modelの一つの特徴は、開発チームの単位として明確にSquadというものを定義していることです。多くの会社でも、Squadのように明確に明確に名付けをしていなくとも、プロジェクト、あるいはプロダクトチームのような形で、ある1つのプロダクトやプロジェクトに対して、様々な役割のメンバー(PDM, FrontEnd, BackEnd, QA, etc..)が一緒に仕事することがあると思います。Spotify Modelはそのような集合を、明確にSquadという組織として定義しています。",
      "2": "ですので、1Squadは例えば1つのプロダクトについて責任を持っていたり、1つの機能に対して責任をもっていたりします。あるいは、皆で1つの新しい機能やプロダクトを開発しようとすることもあります。ある責任範囲について、Squadだけでリリースまで遂行できるような組織が望ましいです。(実際は他のSquadと協力する部分は少なからず出てきます。)",
      "3": "それにより、Squadは自治権を得ることができます。高い自治権を持って、さながら1つのスタートアップのように働きます。",
      "4": "Squad毎に責任が移譲されているということは、その中に属しているメンバーの1人1人が大きな責任をもつということです。例外もありますが、弊社の場合は、1Squadに属する同じChapterの人間は多くて3人、多くは1人か2人です。(1 Business Owner, 1 FrontEnd, 2 Backend, 1 Mobile, 1 Product Owner, 1 QAみたいな感じです。(本当はもう少し増やしたい))例えば、その1人1人が自分の進捗の管理に責任を持ちます。なので、あるSquadにおいて、あるChaper(FrontEnd, BackEnd)の責任はChapter Leadではなく、Chapterのメンバーにあります。(必要に応じてChapterLeadは支援を惜しみませんが)",
      "5": "新規のプロジェクトの多くは、Squad毎にDesign Sprintを行うことで、縦軸のメンバーを早い段階からProjectに関与させることが可能です。",
      "6": "Squadを用いた自己組織の究極の目的、目標としては、1Squadがほぼ独立した会社の用に、プロダクトやビジネスのKPIの達成のために邁進できることではないでしょうか。"
    },
    "chapter": {
      "1": "一方、Chapterは職能・役割別の組織です。例えば、それはFrontEnd Chapterだったり、Backend Chapter, Product Manager Chapterだったりします。Chapter毎に部署、チームを作っている組織が比較的多いのではないかと思います。",
      "2": "Squadに対して、Chapterは同じようなスキルセットを持った人で括られているので、例えば技術的な課題についての議論や、FrontEnd(BackEnd)のアークテクチャ、技術スタックの議論などは、同じChapter間で行われることが多いです。組織の人数にもよるかもしれませんが、コードレビューなども、Chapter間で行われたりします。"
    },
    "squad-plus-chapter": {
      "1": "SquadとChapterを1つずつみると、それらは非常に普遍的なことに見えます。但し、それら2つを明確に定義することで、Squadが追い求める自律と、Chapterによって与えられる調律の両者を追い求めるメッセージ性があります。",
      "2": "これは筆者の主観も含みますが、多くの場合、組織の拡大に伴いChapterが肥大化し、alignmentにかかる時間が増えるとうことが起きやすいです。(規模の大きいChapterが必ずしも悪いということではないです。あくまで起きやすくなる、という観点です。)",
      "3": "それに対してSquadという組織が明確に存在することで、自律性やアウトプットを維持することができるのが特徴になってきます。",
      "4": "僕が実際にSpotify Modelを取り入れていて感じていることとしては、Chapterより前にSquadがきます。確実に自治重視の組織構成です。Squadがある程度独立して動ける前提がありきのChapterになります。",
      "5": "Spotify Modelは理想としては両者を取りに行く手法ですが、どちらを重視しているか、と聞かれれば、明確に自治だと思います。最初から自治を重んじる組織に利用するケースもあれば、Chapter型の組織が成熟していく中で、再び自治を高めるアプローチとして部分的に取り入れていく、というケースが考えられると思います。",
      "6": "次に、その自治を重んじる組織において、調和の鍵を握る、Chapter Leadという役割について説明します。"
    },
    "chapter-lead": {
      "leadership": {
        "1": "改めてですが、Spotify Modelでは、縦割りはSquad(Product, Project毎), 横割りはChapter(FrontEnd, Backend等)と定義してマトリックス型の組織体系で構成されています。Chapter Leadは、横割りのChapterを支援するLeadポジションです。",
        "2": "Chapter Leadは、Engineering Manager要素がやや強いですが、Technicalな期待値も持ち合わせています。リーダーシップとハンズオンの両者が明確に記載されている点が特徴です。",
        "3": "まず、リーダーシップの点についてですが、Scaling Agileでは、次のように書かれています。",
        "4": "The chapter lead is line manager for his chapter members, with all the traditional responsibilities such as developing people, setting salaries, etc",
        "5": "Chapter leadはいわゆるEngineering Managerの側面を持ち合わせていて、Chapter間での技術スタック、知識、ツールの共有などをファシリテートします。また、メンバーの開発のサポートや、目標設定なども行います。"
      },
      "hands-on": {
        "1": "次にハンズオンについてです。",
        "2": "However, the chapter lead is also part of a squad and is involved in the day-to-day work, which helps him stay in touch with reality.",
        "3": "このTouch with realityの部分が非常に大切です。一見、このChapter Leadはいわゆるプレイングマネージャのように見えますが、必ずしもそうではないと考えています。",
        "4": "このrealityという言葉は、色々な読み取り方が出来ます。1エンジニアとしての技術力、エッジなTechnologyに対する理解、プロダクトに対する知識、プロダクトの課題など。",
        "5": "僕は、'プロダクトに対するリアルな課題感の把握' を 'Reality' として捉えています。",
        "6": "例えば、組織として、リファクタリング、リアーキテクトを進めたいが、思ったより進んでない。というIssueがあったとき、どうやって課題を特定していくことになるのでしょうか。どの粒度で課題を見るのが良いでしょうか。それは、プロダクトがMonolithだからなのか、レガシーすぎるからなのか、コードが複雑(らしい)からなのか、コードのドメインが綺麗にわかれていないからなのか、ある複雑な関数のテストコードがなく、リファクタリング後のテストコードがかけないからなのか、メンテナンスタスクに追われて、リファクタリングに時間が避けないからなのか。どれもが正しくある可能性がある一方で、どこに一番課題感を現場の人が感じているのか、それが'実際どれくらい大変なのか'という肌感は、現場にいる人とそうでない人には違いがあることが多いと考えています。",
        "7": "かけられる時間は他のメンバーよりも少ないですが、それでも1Chapterのメンバーとして手を動かすことで、Realな課題感を持つことができると考えています。とはいえ、Leadership, Management業をしつつ、頑張ることで、Chapterのメンバーと同等以上のアウトプットを出してほしいというわけではありません。LeadershipとHands-onにかける比重については、柔軟に考えています。パターンを考えると、",
        "case": {
          "1": "一定の割合を維持する",
          "2": "どちらかに多めの比重をかける(それはもしかしたら、EMっぽいChapter LeadとTechleadっぽいChapter Leadなのかもしれない)",
          "3": "状況に応じてMenagementに専念している時もあれば、開発に専念しているときもある"
        },
        "8": "などがあると思います。どれも一番良いアプローチになりうると考えています。大切なのは",
        "9": "“Maximize chapter productivity, output by using both leadership and hands-on”",
        "10": "に貢献できているかどうかです。"
      },
      "other": {
        "tribe": {
          "1": "Squadの中でも関連が強いSquadなどをグルーピングすることがあります。複数のSquadをさらにグルーピングしたものをTribeといいます。ちなみに、Scaling Agileには次の記述があります。",
          "2": "Tribes are sized based on the concept of the “Dunbar number”, which says that most people cannot maintain a social relationship with more than 100 people or so (the number is actually larger for groups that are under intense survival pressure, which isn’t really the case at Spotify, believe it or not...). When groups get too big, we start seeing more things like restrictive rules, bureaucracy, politics, extra layers of management, and other waste. So tribes are designed to be smaller than 100 people or so",
          "3": "その為、Tribeとはそれなりに成長した組織で発生するイメージがあります。"
        },
        "guild": {
          "1": "A Guild is a more organic and wide-reaching “community of interest”, a group of people that want to share knowledge, tools, code, and practices. Chapters are always local to a Tribe, while a guild usually cuts across the whole organization. Some examples are: the web technology guild, the tester guild, the agile coach guild, etc.",
          "2": "Guildは特定の興味について、Chapterを超えて議論を進めるコミュニティです。例えば、パフォーマンスの改善や、全体的なアークテクチャの指針、監視ツール・プロセスの選定などは、1Chapterで完結しない議論になることがあります。",
          "3": "そういった場合は、Chapterを横断して、Communityとして議論やプロジェクトを進めることがあります。こちらも、実際に現場では比較的実際に起きているものだと思います。例えば、何とか委員会とか、そういうやつです。"
        }
      },
      "another": "Scaling Agileに記載されていて、本記事では触れていないものもあります。それは、Squadの依存関係の管理や、Squadのステータス分析などです。もしも興味がありましたら、原文を読んでみることをお勧めします。",
      "pros": {
        "1": "組織の自治、自己組織化の推進",
        "2": "明確にSquadの自律・自己組織化を推進できる。そしてトレードオフに目を瞑れば、比較的その効果はすぐに出始める。",
        "3": "個々の責任感の醸成",
        "4": "Squadの自律性に伴い、メンバーは高い期待値・責任が与えられていることを多くの場合実感する。大きな組織でも、スタートアップのような責任をここのメンバーに与えることができる。",
        "5": "Squadとして、小規模な独立した組織で高い生産性を発揮する(できないこともある)",
        "6": "Squadが一度ワークすると、そのSquadは非常に高い生産性、アウトプットを出しうる。但し、全てのSquadがこの状態になることは非常に難しい。"
      },
      "cons": {
        "1": "Chapter Leadの組織マネジメントの難しさ",
        "2": "いわゆるEMをやってきた人はこのChapter Leadという責任範囲の特殊さに悩むだろう。コードも書きつつ、マネジメントもする。おまけにSquad毎に独立してどんどん進んでいくから、Chapter全体をサポート、マネジメントするのも難しい。その人の今までのキャリア次第だが、TechLeadでもEM一辺倒でもないこの役割の難しさは高い。",
        "3": "Alignmentのバランス",
        "4": "基本的には、どこまでいってもAlignmentはSquadが無い状態よりも劣る。その中で、Alingmentのレベルを組織としてどこまで求めるか、というバランス感が非常に難しい",
        "5": "高いAgileに対しての理解",
        "6": "各Squadに、少なくともAgileに対するある程度の理解が求められる。Agileに対する理解がない状態では、Squadは上手く機能しないことが多い。会社組織で考えた時に、AgileのExpertは少なからずいるとは思うが、1Squadに1人いるかとなると、難しいケースもある。",
        "7": "間違った自律を制御できない可能性",
        "8": "高い自律性は組織を次のレベルに引き上げる為に必要ですが、自立している各Squadが正しい道を歩んでいるのかに常に気を配る必要があります。例え高い自律性があったとしても、方向性が合っていなければ、最終的に失敗してしまう可能性があります。"
      },
      "consideration": {
        "1": "Spotify has grown very fast - over 3 years we have grown from 30 to 250 people in tech.",
        "2": "これを書いている時点で、250人規模の開発組織です。最初にも書いていますが、Spotify Modelは比較的大規模な組織においてAgileを実現しようとしている方法です。例えば、僕らの組織は20人強です。20人今日でこのエッセンスを取り入れていることと、250人でこれをやるのでは、似て非なる部分が沢山あります。"
      },
      "doubt": {
        "1": "最後に1つつけたしておきたいことがあります。Spotify Modelについて比較的最近調べた人なら、下記の記事にたどり着いている可能性が高いと思います。ここまでの文章を読んで、もしもSpotify Modelをやってみようと思った場合は、これを読んで欲しいです。",
        "2": "これらの記事から一部を抜粋すると、",
        "list": {
          "1": "Spotifyでは、Spotify Modelが会社全体の仕組みとして定着し、適用されることはありませんでした。",
          "2": "特に、自律に対するコントロールが制御できずに管理に苦しんだ。",
          "3": "Squad, Chapter間の協力が出来なかった。",
          "4": "ProductManagerのAlignmentコストが肥大化する。"
        },
        "3": "などが書いてあります。この全ては、実際に起こりうる問題です。また、要求されるスキルセットが高く、機能不全に陥るSquadが比較的発生しやすいのかなという印象もあります。",
        "4": "ここに書かれているCase Studyはどれも具体的なものです。もしもSpotify Modelの考えを適用する、一部取り込む場合は、こちらに書かれている失敗のケースについても学んでおくことをおすすめします。",
        "5": "但し、これはSpotify Modelの全てを否定するものではありません。規模が拡大していく中で、AgileやAutonomyを維持する為に検討できる項目やヒントはSpotify Modelの中にいくつもあります。ただ、悪い目に目を向けること、そして様々なブログでも言及されているますが、Spotify Modelを再現することを目的としないことが大切です。",
        "6": "あくまで、組織をよくする為のヒントを、Spotify Modelの様々な要素の中から見つけるべきです。"
      },
      "last": {
        "1": "Spotify Modelに焦点をしぼり、説明させていただきました。最後に考えされられる文章をのせてしまいましたが、これがあるお陰で、Spotify Modelそのものをみるのではなく、その1つ1つに目を向けることが出来ると思います。",
        "2": "Spotify Modelを参考にしようがしまいが、この記事が組織改善の糸口を考える助けになれば幸いです。"
      }
    }
  }
}
